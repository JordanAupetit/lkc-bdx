=================================================================================
=================================================================================
=================================================================================
=================================================================================

Tous les outils de configuration existants ne proposent pas nécessairement la 
possibilité d'effectuer une recherche, et donc d'accéder facilement et rapidement
à une option (exemple : gconf). D'autant plus que ceux qui le font sont assez 
limités puisqu'ils permettent de rechercher dans les noms (NOM_D_UNE_OPTION) des 
options uniquement (exemple : qconf).
Les options ont toutes un nom (NOM_D_UNE_OPTION), et la plupart une description 
(comprendre un "nom long", plus explicite que le nom de l'option) et une aide.
De fait, notre application se propose d'apporter une amélioration à la recherche,
en laissant la possibilité à l'utilisateur d'effectuer sa recherche selon ces 
trois critères : nom, description et aide.

La recherche par nom rendra la plupart du temps les mêmes résultats que les 
outils existants proposant cette fonctionnalité, et parfois plus.
En effet, pour permettre à l'utilisateur de trouver l'option qu'il cherche, même
si la valeur de celle-ci n'est pas modifiable, nos résultats afficheront 
également les options sans description, contrairement à xconf, par exemple.

########################
IMG EXEMPLE DE RECHERCHE --PAR NOM-- SUR OSS # 21 résultats
########################

La recherche par description retourne la liste des options ayant une descritpion
correspondant au pattern saisi par l'utilisateur.

########################
IMG EXEMPLE DE RECHERCHE --PAR DESCRIPTION-- SUR OSS # 7 résultats
########################

De même pour la recherche dans l'aide.

########################
IMG EXEMPLE DE RECHERCHE --PAR AIDE-- SUR OSS #  168 résultats
########################

On peut constater via ces captures que les résultats sont très différents, et que
la pertinance n'est pas toujours au rendez-vous. En effet, pour une recherche sur
le terme "oss" dans l'aide, correspondant à un module de son, le nombre important
de résultats est dû au fait que ce pattern apparaisse dans "pOSSible", par 
exemple.

Il est également possible de coupler ces critères pour recherche dans le nom et 
l'aide en même temps. Les résultats trouvés correspondent aux options dont le
nom ou l'aide associée correspondent au patern. Il s'agit donc d'un OU logique
et non pas d'un ET logique. Le nombre de résultats peut être plus important via
l'association de plusieurs critères que le plus grand nombre de résultat pour des
critères séparés.

########################
IMG EXEMPLE DE RECHERCHE --PAR NOM + AIDE-- SUR OSS #  180 résultats
########################

Cette recherche emploie le module "kconfiglib.py".


=================================================================================
=================================================================================
=================================================================================
=================================================================================

Les fichiers Kconfig sont présents dans toute l'arborescence d'une archive linux.
Ces fichiers regroupent toutes les options possibles pour un noyau, ainsi que 
les informations correspondantes. 
Voici un exemple extrait du fichier linux-3.13.6/arch/x86/Kconfig: 

config X86_MPPARSE
	bool "Enable MPS table" if ACPI || SFI
	default y
	depends on X86_LOCAL_APIC
	---help---
	  For old smp systems that do not have proper acpi support. Newer systems
	  (esp with 64bit cpus) with acpi support, MADT and DSDT will override it

un nom : X86_MPPARSE
un type : bool
une description / nom long : "Enable MPS table"
des dépendances : if ACPI || SFI
une valeur par défaut : default y
des dépendances : depends on X86_LOCAL_APIC
une aide : ---help---
	  For old smp systems that do not have proper acpi support. Newer systems
	  (esp with 64bit cpus) with acpi support, MADT and DSDT will override it

Pour les besoins du projet, il nous était nécessaire de parser les fichiers 
Kconfig pour récupérer toutes les informations disponibles sur les options : nom,
description, aide, dépendances... Avant de nous lancer tête baissée dans 
l'implémentation d'un parseur, il nous a parut judicieux de chercher si cette 
tâche n'avait pas déjà été accomplie par une tierce personne. Ce fût le cas.
Nous avons trouvé sur github (https://github.com/ulfalizer/Kconfiglib) la 
bibliothèque "Kconfiglib". Cette bibliothèque est implémentée en Python, ce qui 
nous a d'ailleurs poussé vers une implémentation totale dans ce langage, pour 
être homogène avec l'API. En effet, celle-ci permet d'extraire facilement toutes 
les informations des fichier "Kconfig" dont nous avions besoin, de générer un 
fichier .config, de lire un fichier .config, de modifier les valeurs des options
quand c'est possible (s'il n'y a pas de conflits ou de problèmes de dépendances).

Ci-après une brève présentation de ce que nous avons utilisé dans cette API.

La classe Config :

   C'est ici que tout commence, par l'instanciation de cette classe. Celle-ci 
   parcourt l'archive Linux à la recherche de ses fichier Kconfig, afin de les 
   parser et de générer en mémoire la structure qui contiendra toutes les options 
   et leurs informations (nom, type, valeur, description, aide...). 

La méthode Config.get_top_level_items :

   Cette méthode retourne une liste "d'items" qui peuvent être des objets des 
   classe Symbol, Menu, Choice ou Comment. Chacun d'eux hérite de la classe Item.
   Dans notre application, nous avons eu a traiter les symbols, les choices et
   les menus.

   Un symbol est une option basique, de type bool (oui / non) ou tristate (oui /
   non / module). La majorité des options sont de la classe Symbol.
   Un choice est une option de type string, dont la valeur est le nom d'une autre
   option.
   Un menu est un item qui regroupe des options (symbol et choice) en fonction 
   de leurs domaines d'action (exemples : Partition Types, Bus options...).

La méthode (Symbol|Choice).get_visibility :
   
   Cette fonction permet entre autre de savoir si telle ou telle option est 
   modifiable. Il y a plusieurs raisons possibles pour qu'une option ne soit 
   "visible" : 
   - conflit avec une ou plusieurs autres options
   - dépendances non satisfaites
   - type hexadécimale / int

La méthode Config.write_config :
   
   Cette méthode est appelée lorsque la configuration est terminée et / ou qu'il 
   faut sauvegarder le fichier. Elle génère le fichier .config à l'endroit sur le
   disque donné en paramètre.

La méthode Config.load_config :

   Cette méthode nous sert à ouvrir un fichier de configuration pour le charger
   en mémoire, afin d'apporter des modifications par exemple.



=================================================================================
=================================================================================
=================================================================================
=================================================================================

Suite à la demande concernant la génération automatique d'un fichier .config 
minimal, nous avions émis la possibilité de détécter le matériel sur la machine 
qui executerait notre outil, et de créer une configuration associée en activant
les options / modules correspondant. Comme pour le parsage des Kconfig, nous 
avons tout d'abord rechercher s'il n'existait pas une bibliothèque ou un module
capable de le faire pour nous. Nous avons trouvé la bibliothèque "LKDDb" (Linux 
Kernel Driver DataBase, http://cateee.net/lkddb/). Cette bibliothèque permet de 
détecter le matériel, et, couplée à une autre bibliothèque "AutoKernConf", de 
générer un fichier de configuration minimal. Pour le matériel du moins.

LKDDb fournit un script qui permet de générer une liste de correspondance entre 
matériel et option. Voici des extraits de cette liste :

[...]
lkddb acpi "80860F14" :: CONFIG__UNKNOW__ :: drivers/mmc/host/sdhci-acpi.c
lkddb acpi "80860F28" :: CONFIG_ACPI :: drivers/acpi/acpi_platform.c
[...]
lkddb ap 03 :: CONFIG_ZCRYPT :: drivers/s390/crypto/zcrypt_pcicc.c
lkddb ap 04 :: CONFIG_ZCRYPT :: drivers/s390/crypto/zcrypt_pcica.c
[...]
lkddb ccw 1403 .. .... .. :: CONFIG_S390_VMUR :: drivers/s390/char/vmur.c
lkddb ccw 1731 01 1732 01 :: CONFIG_QETH :: drivers/s390/net/qeth_core_main.c
[...]
lkddb eisa "ABP7501" :: CONFIG_SCSI CONFIG_SCSI_ADVANSYS :: drivers/scsi/advansys.c
lkddb eisa "ADP0000" :: CONFIG_SCSI CONFIG_SCSI_AHA1740 :: drivers/scsi/aha1740.c
[...]
lkddb firmware :: CONFIG_ATM_AMBASSADOR :: firmware/atmsar11.fw
lkddb firmware :: CONFIG_BNX2 :: firmware/bnx2/bnx2-mips-06-6.2.1.fw
[...]
lkddb fs "ext4" :: CONFIG_EXT4_FS :: fs/ext4/super.c
lkddb fs "f2fs" :: CONFIG_F2FS_FS :: fs/f2fs/super.c
[...]
lkddb hid 0003 00000079 00000011 :: CONFIG_HID :: drivers/hid/hid-core.c
lkddb hid 0003 00000458 00000138 :: CONFIG_HID CONFIG_HID_KYE :: drivers/hid/hid-kye.c
[...]
lkddb i2c-snd "CS8404" :: CONFIG_SND CONFIG_SND_ICE1712 :: sound/pci/ice1712/ews.c
lkddb i2c-snd "CS8427" :: CONFIG_SND CONFIG_SND_ICE1712 :: sound/i2c/cs8427.c
[...]
lkddb ieee1394 ...... ...... ...... 000001 :: CONFIG_SND CONFIG_SND_DICE :: sound/firewire/dice.c
lkddb ieee1394 ...... ...... 00005e 000001 :: CONFIG_FIREWIRE_NET :: drivers/firewire/net.c
[...]
lkddb module 8021q "802.1Q/802.1ad VLAN Support" :: CONFIG_VLAN_8021Q :: net/8021q/Kconfig
lkddb module ac97_bus "" :: CONFIG_AC97_BUS :: sound/Kconfig
[...]

C'est AutoKernConf qui va détecter le matériel en utilisant des outils Linux ne 
nécessitant pas les droit root, tels que lspci et cat (sur des fichiers comme
"/proc/cpuinfo", par exempe), et construire un fichier .config avec les bonnes 
options pour ce matériel. Tout ça à partir de la liste de correspondance 
 autogénérée par l'API de LKDDb.
